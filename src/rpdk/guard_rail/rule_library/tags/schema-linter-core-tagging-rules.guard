

rule check_if_taggable_is_used {
    taggable !exists
    <<
    {
        "result": "WARNING",
        "check_id": "TAG001",
        "message": "`taggable` is deprecated, please used `tagging` property"
    }
    >>
}

rule ensure_tagging_is_specified {
    tagging exists
    <<
    {
        "result": "WARNING",
        "check_id": "TAG002",
        "message": "`tagging` MUST be specified"
    }
    >>
}

rule ensure_taggable_and_tagging_do_not_coexist when taggable exists {
    tagging !exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "TAG003",
        "message": "`taggable` and `tagging` MUST NOT coexist"
    }
    >>
}

rule ensure_property_tags_exists_v1 when taggable exists {
    when taggable == true {
        properties.Tags exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG004",
            "message": "Resource MUST implement Tags property if `taggable` is true"
        }
        >>
    }
}

rule ensure_property_tags_exists_v2 when tagging exists {
    tagging is_struct
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "TAG005",
        "message": "`tagging` MUST BE a struct"
    }
    >>

    tagging.taggable exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "TAG006",
        "message": "`taggable` MUST BE specified when `tagging` is provided"
    }
    >>

    when tagging.taggable == true {

        tagOnCreate exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG007",
            "message": "Resource MUST provide `tagOnCreate` {true|false} if `tagging.taggable` is true"
        }
        >>

        tagUpdatable exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG008",
            "message": "Resource MUST provide `tagUpdatable` {true|false} if `tagging.taggable` is true"
        }
        >>

        cloudFormationSystemTags exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG009",
            "message": "Resource MUST provide `cloudFormationSystemTags` {true|false} if `tagging.taggable` is true"
        }
        >>

        tagProperty exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG010",
            "message": "Resource MUST provide `tagProperty` {/properties/Tags} if `tagging.taggable` is true"
        }
        >>

        properties.Tags exists
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "TAG011",
            "message": "Resource MUST implement Tags property if `tagging.taggable` is true"
        }
        >>
    }
}
