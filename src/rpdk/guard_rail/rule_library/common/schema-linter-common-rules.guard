rule ensure_primary_identifier_exists_and_not_empty
{
    primaryIdentifier exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PID001",
        "message": "primaryIdentifier MUST exist"
    }
    >>
    primaryIdentifier not empty
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PID002",
        "message": "primaryIdentifier MUST contain values"
    }
    >>
}

rule ensure_primary_identifier_is_read_or_create_only when ensure_primary_identifier_exists_and_not_empty
{
    when readOnlyProperties exists {
        let read = readOnlyProperties
        when createOnlyProperties !exists {
            primaryIdentifier[*] {
                this IN %read
                <<
                {
                    "result": "NON_COMPLIANT",
                    "check_id": "PID003",
                    "message": "primaryIdentifier MUST be readOnly"
                }
                >>
            }
        }
    }
}

rule verify_property_notation
{
    let paths = paths
    when primaryIdentifier exists {
        primaryIdentifier[*] {
            this IN %paths
            <<
            {
                "result": "NON_COMPLIANT",
                "check_id": "PR005",
                "message": "primaryIdentifier MUST have properties defined in the schema"
            }
            >>
        }
    }
}

let props = properties[ keys == /(Arn|arn|ARN)/ ]
rule ensure_arn_properties_type_string when %props !empty {
    %props.type == 'string'
    <<
    {
        "result": "WARNING",
        "check_id": "ARN001",
        "message": "arn related property MUST have pattern specified"
    }
    >>
}

rule ensure_arn_properties_contain_pattern when %props !empty {
    %props.pattern exists
    <<
    {
        "result": "WARNING",
        "check_id": "ARN002",
        "message": "arn related property MUST have pattern specified"
    }
    >>
}
