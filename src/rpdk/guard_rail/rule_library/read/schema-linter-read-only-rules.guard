rule ensure_primary_identifier_exists_and_not_empty
{
    primaryIdentifier exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PID001",
        "message": "primaryIdentifier MUST exist"
    }
    >>
    primaryIdentifier not empty
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PID002",
        "message": "primaryIdentifier MUST contain values"
    }
    >>
}

rule ensure_primary_identifier_is_read_or_create_only when ensure_primary_identifier_exists_and_not_empty
{
    when readOnlyProperties exists {
        let read = readOnlyProperties
        when createOnlyProperties !exists {
            primaryIdentifier[*] {
                this IN %read
                <<
                {
                    "result": "NON_COMPLIANT",
                    "check_id": "PID003",
                    "message": "primaryIdentifier MUST be readOnly"
                }
                >>
            }
        }
    }
}

rule verify_property_notation
{
    let paths = paths
    when primaryIdentifier exists {
        primaryIdentifier[*] {
            this IN %paths
            <<
            {
                "result": "NON_COMPLIANT",
                "check_id": "PR005",
                "message": "primaryIdentifier MUST have properties defined in the schema"
            }
            >>
        }
    }

    when readOnlyProperties exists {
        readOnlyProperties[*] {
            this IN %paths
            <<
            {
                "result": "NON_COMPLIANT",
                "check_id": "PR007",
                "message": "readOnlyProperties MUST have properties defined in the schema"
            }
            >>
        }
    }
}

let props = properties[ keys == /(Arn|arn|ARN)/ ]
rule ensure_arn_properties_type_string when %props !empty {
    %props.type == 'string'
    <<
    {
        "result": "WARNING",
        "check_id": "ARN001",
        "message": "arn related property MUST have pattern specified"
    }
    >>
}

rule ensure_arn_properties_contain_pattern when %props !empty {
    %props.pattern exists
    <<
    {
        "result": "WARNING",
        "check_id": "ARN002",
        "message": "arn related property MUST have pattern specified"
    }
    >>
}

rule ensure_resource_read_handler_exists_and_have_permissions {
    let wildcard_notation = "*"

    handlers.read exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PER003",
        "message": "Resource MUST implement read handler"
    }
    >>

    handlers.read.permissions exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PER004",
        "message": "Resource read handler MUST have permissions list specified"
    }
    >>

    when handlers.read.permissions exists {
        handlers.read.permissions !empty
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "PER004",
            "message": "Resource read handler MUST have non-empty permissions"
        }
        >>
    }

    when handlers.read.permissions !empty {
        handlers.read.permissions.* {
            this != %wildcard_notation
            <<
            {
                "result": "NON_COMPLIANT",
                "check_id": "PER004",
                "message": "Resource MUST NOT specify wildcard permissions for read handler"
            }
            >>
        }
    }
}

rule ensure_resource_list_handler_exists_and_have_permissions {
    let wildcard_notation = "*"

    handlers.list exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PER010",
        "message": "Resource MUST implement list handler"
    }
    >>

    handlers.list.permissions exists
    <<
    {
        "result": "NON_COMPLIANT",
        "check_id": "PER011",
        "message": "Resource list handler MUST have permissions list specified"
    }
    >>

    when handlers.list.permissions exists {
        handlers.list.permissions !empty
        <<
        {
            "result": "NON_COMPLIANT",
            "check_id": "PER011",
            "message": "Resource list handler MUST have non-empty permissions"
        }
        >>
    }

    when handlers.list.permissions !empty {
        handlers.list.permissions.* {
            this != %wildcard_notation
            <<
            {
                "result": "NON_COMPLIANT",
                "check_id": "PER011",
                "message": "Resource MUST NOT specify wildcard permissions for list handler"
            }
            >>
        }
    }
}
